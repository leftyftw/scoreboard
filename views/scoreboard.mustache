<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <style>

            body {
                font-family: Lucida Console;
            }
            .logo {
                display: inline-block;
            }

            .logo img {
                height: 50px;
                width: 50px;
            }

            tr.scores {
                height: 1.5em;
            }

            .playername {
                padding-left: 10px;
                min-width: 75px;
                height: 1.5em;
            }
            .score {
                max-width: 30px;
                min-width: 30px;
                width: 30px;
                text-align: right;
                padding-right: 10px;
            }

            .scoreboard {
                display: inline-block;
            }

            div.controls {
                width: 100vw;

            }

            .controls > button {
                width: 80%;
                margin-left: 10%;
                height: 2em;
                display: inline-block;
                background-color: #e0e0eb;
                color: #003366;
                border-radius: 10px;
                border: 4px double #cccccc;
                text-align: center;
                padding: 20px;
                -webkit-transition: all 0.5s;
                -moz-transition: all 0.5s;
                -o-transition: all 0.5s;
                transition: all 0.5s;
                cursor: pointer;
                margin-top: 5px;
                margin-bottom: 5px;
                margin-left: 10%;
                font-size: 3em;

            }

            @media only screen and  (max-width: 600px) {
                .controls > button {
                }
            }

            @media only screen and (min-width: 601px) {
                .controls > button {
                }
            }

            table {
                border: 1px solid;
                border-color:  {{ borderColor }};
                background-color: {{ backgroundColor }};
                border-spacing: 0;
            }
        </style>
    </head>
    <body>
        <div>
            <div class="logo">
                <a href="/scoreboard/cast/{{id}}" title="Cast Link">
                    <img src="/scoreboard/public/logos/{{logo}}.png" />
                </a>
            </div>
            <div class="scoreboard">
                <table>
                    <tr class="scores" name="player1">                
                        <td class="playername" name="name">{{player1.name}}</td>
                        <td class="score" name="score1">{{player1.score1}}</td>
                        <td class="score" name="score2">{{player1.score2}}</td>
                        <td class="score" name="score3">{{player1.score3}}</td>
                        <td class="score" name="score4">{{player2.score4}}</td>
                        <td class="score" name="score5">{{player2.score5}}</td>
                    </tr>
                    <tr class="scores" name="player2">
                        <td class="playername" name="name">{{player2.name}}</td>
                        <td class="score" name="score1">{{player2.score1}}</td>
                        <td class="score" name="score2">{{player2.score2}}</td>
                        <td class="score" name="score3">{{player2.score3}}</td>
                        <td class="score" name="score4">{{player2.score4}}</td>
                        <td class="score" name="score5">{{player2.score5}}</td>
                    </tr>
                </table>
            </div>
        </div>

        <div class="controls">
            <button class="changeServer" onclick="changeServer()">Server</button>
            <hr />
            <button class="addPoint" onclick="addPoint()">+1 Point</button>
            <button class="deductPoint" onclick="deductPoint()">-1 Point</button>
<!--             
            <hr />
            <button class="player1Timeout">{{player1.name}} Timeout</button>
            <button class="player2Timeout">{{player2.name}} Timeout</button>
            <hr />
            <button class="player1Appeal">{{player1.name}} Appeal</button>
            <button class="player2Appeal">{{player2.name}} Appeal</button>
            <hr />
            <button class="player1Technical">{{player1.name}} Tech</button>
            <button class="player2Technical">{{player2.name}} Tech</button> 
-->
            <hr />
            <button class="newGame" onclick="newGame()">New Game</button>
            <hr />
            <button class="home" onclick="home()">Event Home</button>
        </div>
    </body>

    <script>
    document.addEventListener("keydown", keyDownHandler, false);
    let refreshTimer;
    
    function configureTimer() {
        setInterval(() => {
            loadData('{{id}}');
        }, 1000);
    }

    configureTimer();


    if ("{{player1.name}}" === "" || "{{player2.name}}" === "") {
        configureGame();
    }

    async function configureGame() {
        const endpoint = '/scoreboard/api/game/{{id}}';
        const p1 = window.prompt('Player 1 name');
        const p2 = window.prompt('Player 2 name');
        payload = { player1: { name: p1, score1: 0, score2: 0, score3: 0, score4: 0, score5: 0 }, player2: { name: p2, score1: 0, score2: 0, score3: 0, score4: 0, score5: 0 }, game: 1 };
        callback(endpoint, payload);
    }

    async function loadData(gameId) {
        const GET_gameIdEndpoint = `/scoreboard/api/game/${gameId}`;
        const response = await fetch(GET_gameIdEndpoint);
        const gameData = await response.json();
        updateDataView(gameData);
    }

    function getChildElement(node, elementName) {
        return node.querySelector(`td[name='${elementName}']`);
    }

    async function updateDataView(scoreInfo) {
        let p1Node = document.getElementsByName("player1")[0];
        let p2Node = document.getElementsByName("player2")[0];

        const updatePlayerInfo = (player, node) => {
            getChildElement(node, "name").textContent = player.name;

            for (let i = 1; i <= 5; i++) {
                const gametd = getChildElement(node, `score${i}`);
                gametd.textContent = player[`score${i}`];
                if (i > 0) {
                    gametd.hidden = scoreInfo.game < i;
                }
            }
        };

        updatePlayerInfo(scoreInfo.player1, p1Node);
        updatePlayerInfo(scoreInfo.player2, p2Node);

        serverState = scoreInfo.server;
        
        p1NameNode = p1Node.querySelector(`td[name='name']`);
        p2NameNode = p2Node.querySelector(`td[name='name']`);
        if (serverState === "player1") {
            p1NameNode.style.fontWeight = "bold"
            p2NameNode.style.fontWeight = "normal"
        } else {
            p1NameNode.style.fontWeight = "normal"
            p2NameNode.style.fontWeight = "bold"
        }
    }

    async function callback(endpoint, payload) {
        const response = await fetch(endpoint, {
            method: "POST", 
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)});
        response.json().then(data => {
            loadData('{{id}}');
        });
    }

    let serverState = "{{server}}";

    function home() {
        location.href = "/scoreboard/event/{{eventId}}";
    }

    function changeServer() {
        const endpoint = '/scoreboard/api/game/{{id}}';
        const payload = { server: (serverState === "player1") ? "player2": "player1"  };
        callback(endpoint, payload);
    }

    function addPoint() {
        const endpoint = '/scoreboard/api/game/{{id}}/point';
        const payload = {
            server: serverState,
            points: 1
        };
        callback(endpoint, payload);
    }

    function deductPoint() {
        const endpoint = '/scoreboard/api/game/{{id}}/point';
        const payload = {
            server: serverState,
            points: -1
        };
        callback(endpoint, payload);

    }

    function newGame() {
        const endpoint = '/scoreboard/api/game/{{id}}/game';
        const payload = {};
        callback(endpoint, payload);
    }

    function keyDownHandler(e) {
        switch(e.key) {
            case 'h':
              home();
              return;
            case 's': 
              changeServer();
              break;
            case 'p': 
              addPoint();
              break;
            case 'o': 
              deductPoint();
              break;
            case 'g':
              newGame();
              break;
            default:
              return;
        }            
    }
    </script>
</html>
